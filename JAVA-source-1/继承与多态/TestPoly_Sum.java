/*
	多态的总结：
	
		一个父类的引用类型变量，它既可以指向父类对象，也可以指向子类对象，
	它可以根据当前时刻指向的不同，自动调用不同对象的方法（仅限于继承于父类的方法，子类特有的方法无法调用），这就是多态；
	
		利用多态可以实现：
			同一段代码做不同事情；（TestPoly_4.java）
		如：
			假设A派生出B，B派生出C；
			试着编写一个函数实现调用整个 A类族 所有对象f方法；
			所谓 A类族 就是 A类及其A的子孙类所形成的一个 族群；

	多态注意事项(难点)：
		
	1. 子类对象 可以 直接 赋给 父类引用，但父类对象在任何情况下都不可以直接赋给子类引用，
	因为子类是父类的一种，但父类不是子类的一种，或者说，子类可以当作父类看待，但父类不可以当作子类看待，
	例如：狗可以当作动物来看待，但动物不能当作狗来看待；(TestPoly_1.java)
	
	2. 通过 父类引用 只能访问 子类对象 从父类继承过来的成员；
	   通过 父类引用 不能访问 子类对象 特有的成员；(TestPoly_3.java)
	
	3. 父类引用 永远不能 直接 赋给子类引用：
			只有在 父类引用本身 指向的就是一个 子类对象时，才可以把 父类引用 强制转换为 子类引用；
			
			其他情况下不允许把 父类引用 强制转换为 子类引用，否则运行时会出错；(TestPoly_2.java)


*/